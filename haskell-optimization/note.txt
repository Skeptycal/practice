Gmail	Takayuki Muranushi <muranushi@gmail.com>
Haskellコード高速化
3 件のメッセージ
Takatoshi Ichikawa <ichikawa@yukawa.kyoto-u.ac.jp>	2014年12月15日 17:55
To: Takayuki Muranushi <muranushi@gmail.com>

村主様、

元気にしてますか？
きっとヌッシーなら、理研はなかなか刺激的な環境なのではと思います。

僕の方はHaskellにすっかりハマってしまいました。
本当に凄い言語を紹介してもらったなーとヌッシーには感謝感激しています。

ヌッシーは知ってると思うんだけど、
project eulerをどこかの記事で知って、
haskellの練習がてら50問ほど一気にhaskellで解いてみました。
これをやったおかげでpreludeとList.Dataの関数はかなり慣れる事が出来ました。
haskellだとたった数行で答えを出せる場合が多くて、
あまりの凄さに気絶しそうになりました。

慣れるにつれて、fortran捨ててすべてhaskellで書きたいなと思うようになってきました。

そこで今回、ヌッシーお願いがあってメールをしたのですが、
本気でhaskellに移行してみようかと今、いろいろテストしています。
一番簡単な原子核の模型で、原子核のエネルギーを計算するコードを書いてみたのですが、
やはりFortranと比較してかなり（６倍ほど）スピードが遅いです。。。

そこで申し訳ないのですが、もし時間があるのならばヌッシーにコードを見てもらって、
もう少し高速化できないのかコメントをもらえると非常にありがたいのですが、
お願いできないでしょうか？

コードの構造自体は非常に簡単で、計算コストが一番かかっている所は三重積分の部分です。
自分なりに早くなるように色々試したのですが、（例えばData.Vectorを使うなど）
初心者には今で限界です。。。

お忙しい所、申し訳ないのですが、是非ともよろしくお願いします。

市川




Takayuki Muranushi <muranushi@gmail.com>	2014年12月16日 0:31
To: Takatoshi Ichikawa <ichikawa@yukawa.kyoto-u.ac.jp>
そこまでHaskellを愛好してくれて嬉しいです！
ぜひなるべく時間を作ってみてたく思いますので、コードを送ってくださいませんか。

2014年12月15日 17:55 Takatoshi Ichikawa <ichikawa@yukawa.kyoto-u.ac.jp>:
[元のメッセージ非表示]
Takatoshi Ichikawa <ichikawa@yukawa.kyoto-u.ac.jp>	2014年12月16日 11:18
To: Takayuki Muranushi <muranushi@gmail.com>

村主様、

どうもありがとう！是非、よろしくお願いします。
ヌッシーも忙しいだろうから、暇なときにでもちらっと見てもらって、
少しでも良いので何かコメントを頂けたら嬉しいです。

あの本のヌッシーの共著者の田中さんがネット上で、
C++と同じメモリ構造を使う限りはhaskellでも同じスピードが出るはず、
と主張しているのが少し気になっています。
コードはごく簡単で足し算をとにかく繰り返しているだけなので、
もう少しスピードが出ないのかなと。

メインコードはMain.hsでcabalファイルも添付しておきます。

このコードは原子核で一番簡単なBrinkαクラスター模型を使って、
原子核のエネルギーを計算するコードです。

原子核の最小単位をα粒子(陽子2個と中性子2個）として波動関数を構成します。
α粒子の波動関数は、調和振動子での最低軌道、つまりS波だとして、
空間部分はガウス関数で近似してしまいます。

このコードは8Be(陽子4個、中性子４個）つまりα粒子が2個の系としてエネルギーを計算します。
その時、α-α間の距離を徐々に大きくしていって、エネルギーがどうなるのかを計算しています。
(Main.hs中の r がα間距離、単位はfm)

BrinkALP.hsは波動関数に関係するモジュールです。
GaussALPのdataはs波で近似したガウス関数を表していて、
その中心座標X,Y,Zを保存するようになっています。
定数nuはそのガウス関数の幅を表しています。

一つのGaussALPをalpとすると、そのリスト[alp,alp']が全系の波動関数になります。
それをtype SlaterWFで定義しています。
ここがunboxのVectorと定義できそうな気がするのですが、
GaussALPをunboxとする方法がよくわかりませんでした。

全系の波動関数は重心位置が0となるようにfixCMPositionでずらします。

VolkovALP.hsはハミルトニアンに関するモジュールです。
hVolkovがSlaterWFを二つ受け取って、エネルギーと二つの波動関数のoverlapを返します。
calcVkinは運動エネルギー部分、calcVpotはポテンシャルエネルギー部分を計算します。

さて、一番計算コストがかかっているのが、Projection.hsです。
原子核は孤立系なので、今のように手で与えた波動関数（物体固定系）では、
実験室系に対して良い量子数になっていません。
実験室系で角運動量の量子数の良い状態となるように、
物体固定系の波動関数をオイラー角で三次元的に回転させながら、
そのすべてを重ね合わせます（ついでにパリティに対しても良い状態となるように）。
これを原子核では角運動量・パリティ射影と言います。

am_proj_0がその射影を行う関数です。（J=0+状態へ射影すると言う意味）
これはオイラー角α、β、γ方向に関して台形公式を使って重積分を行います。
台形公式の重みはwxyzであらかじめ生成してあります。
パリティ射影は+か-か二種類あるので、それを選択できるように、
am_proj_0の第二引数には+か-を渡す事ができる様にしてあります。
ここのListをVectorに変えたりしたんですが、スピード的にはあまり変わりませんでした。

忙しいと思いますが、コメントをどうぞよろしくお願いいたします。

市川






> 2014/12/16 0:31、Takayuki Muranushi <muranushi@gmail.com> のメール：
>
> そこまでHaskellを愛好してくれて嬉しいです！
> ぜひなるべく時間を作ってみてたく思いますので、コードを送ってくださいませんか。
>
> 2014年12月15日 17:55 Takatoshi Ichikawa <ichikawa@yukawa.kyoto-u.ac.jp>:
>>
>> 村主様、
>>
>> 元気にしてますか？
>> きっとヌッシーなら、理研はなかなか刺激的な環境なのではと思います。
>>
>> 僕の方はHaskellにすっかりハマってしまいました。
>> 本当に凄い言語を紹介してもらったなーとヌッシーには感謝感激しています。
>>
>> ヌッシーは知ってると思うんだけど、
>> project eulerをどこかの記事で知って、
>> haskellの練習がてら50問ほど一気にhaskellで解いてみました。
>> これをやったおかげでpreludeとList.Dataの関数はかなり慣れる事が出来ました。
>> haskellだとたった数行で答えを出せる場合が多くて、
>> あまりの凄さに気絶しそうになりました。
>>
>> 慣れるにつれて、fortran捨ててすべてhaskellで書きたいなと思うようになってきました。
>>
>> そこで今回、ヌッシーお願いがあってメールをしたのですが、
>> 本気でhaskellに移行してみようかと今、いろいろテストしています。
>> 一番簡単な原子核の模型で、原子核のエネルギーを計算するコードを書いてみたのですが、
>> やはりFortranと比較してかなり（６倍ほど）スピードが遅いです。。。
>>
>> そこで申し訳ないのですが、もし時間があるのならばヌッシーにコードを見てもらって、
>> もう少し高速化できないのかコメントをもらえると非常にありがたいのですが、
>> お願いできないでしょうか？
>>
>> コードの構造自体は非常に簡単で、計算コストが一番かかっている所は三重積分の部分です。
>> 自分なりに早くなるように色々試したのですが、（例えばData.Vectorを使うなど）
>> 初心者には今で限界です。。。
>>
>> お忙しい所、申し訳ないのですが、是非ともよろしくお願いします。
>>
>> 市川
>>
>>
>>
>>



		BrinkALP.tar.gz
5K

